# 工作流程名称：Flutter 构建 APK/IPA 并上传产物（仅手动触发）
name: Flutter Build

on:
  # 仅支持手动触发
  workflow_dispatch:
    inputs:
      buildMode:
        description: '构建模式（debug/release）'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - debug
      buildPlatform:
        description: '构建平台'
        required: true
        default: 'android'
        type: choice
        options:
          - android
          - ios
          - web
          - windows

jobs:
  build-windows:
    if: ${{ inputs.buildPlatform == 'windows' }}
    runs-on: windows-latest
    steps:
      - name: 1. 拉取仓库代码
        uses: actions/checkout@v4

      - name: 2. 安装并缓存 Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'
          cache: true

      - name: 3. 安装项目依赖
        run: flutter pub get
        working-directory: .

      - name: 4. 构建 Windows 可执行文件
        run: |
          echo "当前构建模式：${{ inputs.buildMode }}"
          flutter build windows --${{ inputs.buildMode }}
        working-directory: .

      - name: 5. 上传 Windows 可执行文件到构建产物
        uses: actions/upload-artifact@v4
        with:
          name: Flutter-Windows-${{ inputs.buildMode }}-v${{ github.run_number }}
          path: build/windows/runner/${{ inputs.buildMode == 'release' && 'Release' || 'Debug' }}/

  build-web:
    if: ${{ inputs.buildPlatform == 'web' }}
    runs-on: ubuntu-latest
    steps:
      - name: 1. 拉取仓库代码
        uses: actions/checkout@v4

      - name: 2. 安装基础系统依赖
        run: |
          sudo apt update && sudo apt install -y curl git unzip xz-utils zip libglu1-mesa

      - name: 3. 安装并缓存 Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'
          cache: true

      - name: 4. 安装项目依赖
        run: flutter pub get
        working-directory: .

      - name: 5. 构建 Web 文件
        run: |
          BUILD_MODE=${{ inputs.buildMode }}
          echo "当前构建模式：$BUILD_MODE"
          flutter build web --$BUILD_MODE
        working-directory: .

      - name: 6. 上传 Web 构建产物
        uses: actions/upload-artifact@v4
        with:
          name: Flutter-Web-${{ inputs.buildMode }}-v${{ github.run_number }}
          path: build/web/*

  build-android:
    if: ${{ inputs.buildPlatform == 'android' }}
    runs-on: ubuntu-latest
    steps:
      - name: 1. 拉取仓库代码
        uses: actions/checkout@v4

      - name: 2. 安装基础系统依赖
        run: |
          sudo apt update && sudo apt install -y curl git unzip xz-utils zip libglu1-mesa openjdk-17-jdk
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
          export PATH=$JAVA_HOME/bin:$PATH

      - name: 3. 安装并缓存 Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'
          cache: true

      - name: 4. 安装项目依赖
        run: flutter pub get
        working-directory: .

      - name: 5. 构建 APK 文件
        run: |
          BUILD_MODE=${{ inputs.buildMode }}
          echo "当前构建模式：$BUILD_MODE"

          flutter build apk --$BUILD_MODE --no-tree-shake-icons
        working-directory: .

      - name: 6. 上传 APK 到构建产物
        uses: actions/upload-artifact@v4
        with:
          name: Flutter-APK-${{ inputs.buildMode }}-v${{ github.run_number }}
          path: build/app/outputs/apk/${{ inputs.buildMode }}/*.apk
          retention-days: 30

  build-ios:
    if: ${{ inputs.buildPlatform == 'ios' }}
    runs-on: macos-latest
    steps:
      - name: 1. 拉取仓库代码
        uses: actions/checkout@v4

      - name: 2. 接受 Xcode 许可协议
        run: sudo xcodebuild -license accept

      - name: 3. 安装并缓存 Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'
          cache: true

      - name: 4. 安装项目依赖
        run: flutter pub get
        working-directory: .

      - name: 5. 构建 IPA 文件（无签名）
        run: |
          BUILD_MODE=${{ inputs.buildMode }}
          echo "当前构建模式：$BUILD_MODE"
          flutter build ipa --$BUILD_MODE --no-codesign
        working-directory: .

      # 新增步骤：将 .xcarchive 转换为 .ipa
      - name: 6. 转换 .xcarchive 为 .ipa
        run: |
          # 创建转换脚本
          cat > ipagen.sh << 'EOF'
          # this shell script takes an .xcarchive file generated by Xcode and converts it to an .ipa file
          # which is then put on the Desktop

          # define style vars here
          bold=$(tput bold)
          normal=$(tput sgr0)
          red='\033[1;31m'
          no_style='\033[0m'
          ind='       '

          # make sure the CODE_SIGNING_REQUIRED field of Xcode's SDKSettings.plist is set to NO
          # this makes it so that we will not need to have a Developer Account to export an IPA
          plutil -replace DefaultProperties.CODE_SIGNING_REQUIRED -string NO /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/SDKSettings.plist

          # if the script was not run with at least one argument, log an error and terminate the script
          if [ $# -lt 1 ]
          then
              echo -e "${red}ERROR: ${no_style}ipagen acknowledges only the first argument, which is the path of the .xcarchive file"
              echo "${ind}the proper call should look like this:"
              echo "${ind}${bold}$ ./ipagen.sh <path_to_file>${normal}"
              echo "${ind}simply drag the file to the terminal to substitute for ${bold}<path_to_file>${normal}"
              exit 1
          fi

          # if the directory is NOT found, then log an error and terminate the script.
          # this is important because if the directory does not exist, shit hits the fan
          if [ ! -d "$1" ]
          then
              echo -e "${red}ERROR: ${no_style}the specified directory was not found"
              echo "${ind}terminating script"
              exit 1
          fi

          # check to make sure there isn't already a Payload folder that we might overwrite
          if [ -d Payload ]
          then
              echo -e "${red}ERROR: ${no_style}a Payload folder already exists in current directory"
              echo "${ind}either rename or remove the folder before trying again"
              echo "${ind}terminating script"
              exit 1
          fi

          # cd to the arg1 directory
          cd "$1"

          # $1 is the path to your .xcarchive file
          # cd all the way to the directory containing the internal .app file

          # if the Products directory exists, cd there
          if [ ! -d Products ]
          then
              echo -e "${red}ERROR: ${no_style}the Products directory was not found"
              echo "${ind}terminating script"
              exit 1
          else
              cd Products
          fi

          # if the Applications directory exists, cd there
          if [ ! -d Applications ]; then
              echo -e "${red}ERROR: ${no_style}the Applications directory was not found"
              echo "${ind}terminating script"
              exit 1
          else
              cd Applications
          fi

          # set empty equal to result of running find . -type d -empty on current directory
          empty=$(find . -type d -empty)

          # if find . -type d -empty returns "." then there is nothing in the directory, which should not happen
          if [ "$empty" == "." ]
          then
              echo -e "${red}ERROR: ${no_style}the Applications directory was found to be empty"
              echo "${ind}try re-archiving the application"
              echo "${ind}terminating script"
              exit 1
          fi

          # set APPNAME to be the only file in the folder
          APPNAME=$(ls)

          # the Desktop directory is configured to not be renamable, but this is to make the
          # script bulletproof
          if [ ! -d "$GITHUB_WORKSPACE" ]
          then
              echo -e "${red}ERROR: ${no_style}somehow did not find the workspace directory"
              echo "${ind}terminating script"
              exit 1
          fi

          # move the app to the workspace directory
          mv $APPNAME "$GITHUB_WORKSPACE"

          # delete the archive as we do not need it anymore
          rm -r "$1"

          # cd to the workspace directory
          cd "$GITHUB_WORKSPACE"

          # create a folder called Payload
          mkdir Payload

          # move the .app to the new folder
          mv $APPNAME Payload

          # compress the Payload folder to a .zip folder called App
          zip -r App.zip Payload

          # final conversion from .zip to .ipa by simple renaming
          mv App.zip App.ipa

          # cleanup
          rm -r Payload
          EOF

          # 给脚本执行权限
          chmod 777 ipagen.sh

          # 获取 xcarchive 文件路径
          ARCHIVE_PATH=$(find build/ios/archive -maxdepth 1 -name "*.xcarchive" -print -quit)
          echo "Found xcarchive: $ARCHIVE_PATH"

          # 执行转换脚本
          ./ipagen.sh "$ARCHIVE_PATH"

          # 验证生成的 IPA 文件
          if [ ! -f "App.ipa" ]; then
            echo "ERROR: IPA generation failed - App.ipa not found"
            exit 1
          fi

      - name: 7. 上传 IPA 到构建产物
        uses: actions/upload-artifact@v4
        with:
          name: Flutter-IPA-${{ inputs.buildMode }}-v${{ github.run_number }}
          path: App.ipa
          retention-days: 30
